package study.chapter_14;

public class WhatIsLambda {
    /*
        함수적 프로그래밍
        y=f(x) 형태의 함수로 구성된 프로그래밍 기법
        - 데이터를 매개 값으로 전달하고 결과를 받는 코드들로 구성
        - 객체 지향 프로그래밍 보다는 효율적인 경우
         1). 대용량 데이터의 처리시에 유리
            > 데이터를 객체로 만들고 처리하는 것보다 데이터를 바로 처리하는 것이 속도에 유리 (메모리 이슈 포함 - 객체로 만드는건 메모리에 포함)
            > 멀티코어 CPU 에서 데이터를 병렬 처리하고 취합할 때 객체보다는 함수가 유리
         2). 이벤트 지향 프로그래밍(이벤트가 발생하면 핸들러 함수 실행)에 적합
            > 반복적인 이벤트 처리는 핸들러 객체보다는 핸들러 함수가 적합

        현대적 프로그래밍 기법
        - 객체 지향 프로그래밍 + 함수적 프로그래밍

        자바 8부터 함수적 프로그래밍 지원
        람다식(Lamda Expressions)을 언어 차원에서 제공
        - 람다 계산법에서 사용된 식을 프로그래밍 언어에 접목
        - 익명함수(anonymous function)을 생성하기 위한 식
        - (타입 매개변수..) -> { 실행 문 }

        자바에서 람다식을 수용한 이유
        - 코드가 매우 간결해진다.
        - 컬렉션 요소(대용량 데이터)를 필터링 또는 매핑해서 쉽게 집계할 수 있다.

        자바는 람다식을 함수적 인터페이스(한 개의 메소드를 가지고 있는 인터페이스)의 익명 구현 객체로 취급
        - 람다식 -> 매개변수를 가진 코드 블록 -> 익명 구현 객체

        어떤 인터페이스를 구현할지는 대입되는 인터페이스에 달려 있다.

        ex)
        Runnable runnable = new Runnable() {
            public void run() { ...}
        }

        Runnable runnable = () -> { ... }
        람다식이 runnable 에 익명객체로 생성된다.
     */
}






